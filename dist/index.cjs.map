{"version":3,"file":"index.cjs","sources":["../src/index.tsx"],"sourcesContent":["// @ts-ignore\nimport { useState, useEffect, useRef, createContext, useContext, useCallback, Dispatch, SetStateAction, MutableRefObject } from 'react';\n\ninterface QueryResultCacheFn {\n    get: Function,\n    has: Function,\n    clear: Function,\n}\n\ninterface QueryResult {\n    data: any;\n    error: Error | false | null;\n    loading: boolean;\n    mutate: Function;\n    refresh: Function;\n    cache: QueryResultCacheFn;\n}\n\ninterface QueryEventResult {\n    sendRequest: Function;\n    isSending: boolean;\n    data: any;\n    error: Error | false | null;\n    loading: boolean;\n    mutate: Function;\n    refresh: Function;\n    cache: QueryResultCacheFn;\n}\n\ninterface DefaultUseQueryOptions {\n    name?: string;\n    selector?: string;\n    pick?: Array<any> | Function;\n    transform?: Function;\n    method?: string;\n    headers?: object;\n    body?: any;\n    isDebuggerActivated?: boolean;\n    cacheTimeout?: number;\n}\n\ninterface CacheObject {\n    current: object\n}\n\ninterface CreateStoreReturn {\n    __value: object\n}\n\ntype DispatchersActions = {\n    actions: object\n}\n\ntype DispatcherOptions = {\n    name: string,\n    actions: object\n}\n\nconst DEFAULT_OPTIONS: DefaultUseQueryOptions = {\n    name: undefined,\n    selector: undefined,\n    transform: undefined,\n    pick: undefined,\n    method: \"GET\",\n    headers: undefined,\n    body: undefined,\n    isDebuggerActivated: false,\n    cacheTimeout: 0,\n};\n\nconst dispatchers: DispatchersActions = {\n    actions: {}\n};\n\nconst cache: CacheObject = {\n    current: {}\n}\n\nlet cacheTimeout: number | null = null;\n\n/**\n * @param {string} [message=\"\"] \n * @param {boolean} [isDebuggerActivated=false]\n * @param {boolean} [isError=false] \n * @param {null|string|Error} [error=null]\n */\nconst logDebugger = (message: string = \"\", isDebuggerActivated: boolean = false, isError: boolean = false, error: null | Error = null) => {\n    if (isError) {\n        if (isDebuggerActivated) console.error(`[USE_QUERY]: ${message} - ${new Date().toLocaleTimeString()}`, error);\n    } else {\n        if (isDebuggerActivated) console.log(`[USE_QUERY]: ${message} - ${new Date().toLocaleTimeString()}`);\n    }\n}\n\n/**\n * @param {DefaultUseQueryOptions} options \n * @returns {boolean}\n */\nconst validateOptions = (options: DefaultUseQueryOptions): boolean => {\n    const keys = Object.keys(DEFAULT_OPTIONS);\n    const _keys = Object.keys(options);\n    const symDifference = _keys.filter(item => !keys.includes(item));\n\n    if (options.selector !== undefined && typeof options.selector !== \"string\") {\n        logDebugger(\"Validation error for `options.selector`\", options.isDebuggerActivated, true, new Error(\"Selector must be a string. It should contains key value to select from result object.\"));\n        return false;\n    } else if (options.name !== undefined && typeof options.name !== \"string\") {\n        logDebugger(\"Validation error for `options.name`\", options.isDebuggerActivated, true, new Error(\"Name must be a string. It should contains data name to retrieve it from state.\"));\n        return false;\n    } else if (options.method !== undefined && (typeof options.method !== \"string\" || [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"].indexOf(options.method.toUpperCase()) === -1)) {\n        logDebugger(\"Validation error for `options.method`\", options.isDebuggerActivated, true, new Error('Method must be a string. It should be one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".'));\n        return false;\n    } else if (options.headers !== undefined && typeof options.headers !== \"object\" && Array.isArray(options.headers)) {\n        logDebugger(\"Validation error for `options.headers`\", options.isDebuggerActivated, true, new Error(\"Headers must be an object. It should contains request headers key value.\"));\n        return false;\n    } else if (options.isDebuggerActivated !== undefined && typeof options.isDebuggerActivated !== \"boolean\" && Array.isArray(options.headers)) {\n        logDebugger(\"Validation error for `options.isDebuggerActivated`\", true, true, new Error(\"isDebuggerActivated must be a boolean. It should be activated if you need to debug all process.\"));\n        return false;\n    } else if (options.transform !== undefined && typeof options.transform !== \"function\") {\n        logDebugger(\"Validation error for `options.transform`\", true, true, new Error(\"transform must be a function. It rappresent the function to transform data before saving on state.\"));\n        return false;\n    } else if (options.pick !== undefined && (typeof options.pick !== \"function\" && !Array.isArray(options.pick))) {\n        logDebugger(\"Validation error for `options.pick`\", true, true, new Error(\"pick must be a function or an array. It rappresent the function or the array to pick just a portion of data.\"));\n        return false;\n    } else if (options.cacheTimeout !== undefined && typeof options.cacheTimeout !== \"number\") {\n        logDebugger(\"Validation error for `options.cacheTimeout`\", true, true, new Error(\"cacheTimeout must be a number. It rappresent the timeout to remove cached data from memory in milliseconds.\"));\n        return false;\n    }\n    \n    if (symDifference.length > 0) {\n        logDebugger(\"Validation error\", true, true, new Error(`Found not valid option${symDifference.length > 1 ? \"s\" : \"\"}: \"${symDifference.join('\", \"')}\".`));\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * @param {DefaultUseQueryOptions} options \n * @param {MutableRefObject} cache \n */\nconst timeoutCacheClear = (options: DefaultUseQueryOptions, cache: MutableRefObject<any>) => {\n    if (options.cacheTimeout && options.cacheTimeout > 0) {\n        logDebugger(`Cache clear timeout start: ${options.cacheTimeout / 1000} seconds.`, options.isDebuggerActivated);\n        window.clearTimeout(cacheTimeout as number);\n        cacheTimeout = window.setTimeout(() => {\n            cache.current = {};\n            logDebugger(`Cache cleared`, options.isDebuggerActivated);\n        }, options.cacheTimeout);\n    }\n}\n\n/**\n * Creates a store with the provided initial state.\n * @param {object} initialState - The initial state object for the store.\n * @returns {CreateStoreReturn} An object representing the created store.\n */\nexport const createQueryStore = (initialState: object): CreateStoreReturn => {\n    Object.entries(initialState).forEach(([key, value]) => {\n        cache.current[key] = value;\n    });\n\n    return { __value: initialState };\n}\n\nconst QueryContext = createContext(null);\n\nexport const QueryProvider = ({ children, store, dispatchers: _dispatchers }) => {\n    if (store && !store.__value) throw new Error(\"`store` must be a valid QueryStore data, use `createQueryStore` function to create it\");\n\n    if (_dispatchers && !Array.isArray(_dispatchers)) {\n        throw new Error(\"`dispatchers` must be a valid array of dispatchers, use `createDispatcher` function to generate them\");\n    } else {\n        _dispatchers.forEach(({ name, actions }) => {\n            dispatchers.actions = {\n                ...dispatchers.actions,\n                [name]: {\n                    ...dispatchers.actions[name],\n                    ...actions,\n                },\n            }\n        });\n    }\n    \n    const [state, setState] = useState(store ? store.__value : null);\n\n    return (\n        // @ts-ignore\n        <QueryContext.Provider value={[state, setState]}>\n            {children}\n        </QueryContext.Provider>\n    )\n}\n\n/**\n * Creates a dispatcher object with specified actions for managing state updates.\n * @param {DispatcherOptions} dispatcherOptions - Options for configuring the dispatcher.\n * @returns {DispatcherObject} An object representing the created dispatcher.\n */\nexport const createQueryDispatcher = (dispatcherOptions: DispatcherOptions) => {\n    const actions = {};\n\n    Object.entries(dispatcherOptions.actions).forEach(([actionName, actionFn]) => {\n        actions[actionName] = (data: any, setData: Function) => (payload: any) => {\n            const _data = { ...data }[dispatcherOptions.name];\n            \n            actionFn(_data, payload);\n\n            setData({ ...data, ..._data });\n        };\n    });\n\n    return {\n        name: dispatcherOptions.name,\n        actions\n    }\n}\n\n/**\n * Custom hook for accessing dispatcher actions associated with a specific name.\n * @param {string} name - The name of the dispatcher to retrieve actions for.\n * @returns {Object} An object containing the actions associated with the specified dispatcher name.\n */\nexport const useQueryDispatcher = (name: string) => {\n    // @ts-ignore\n    const [data, setData] = useContext(QueryContext);\n\n    const actions = {};\n    \n    Object.entries(dispatchers.actions[name]).forEach(([actionName, actionFn]) => {\n        // @ts-ignore\n        actions[actionName] = (payload: any) => actionFn(data, setData)(payload);\n    });\n\n    return actions;\n}\n\n/**\n * Custom hook for accessing and updating query state from the QueryContext.\n * @param {string} [name=undefined] - The name of the specific state to access within the query data.\n * @returns {[S, Dispatch<SetStateAction<S>>]} An array containing the queried state and a function to update the state.\n *                 If `name` is provided, it returns the specified state and a function to update that state.\n *                 If `name` is not provided, it returns the entire query data and a function to update it.\n */\nexport const useQueryState = (name: string | undefined = undefined): [any, Dispatch<SetStateAction<any>>] => {\n    // @ts-ignore\n    const [data, setData] = useContext(QueryContext);\n    \n    if (name) { \n        return [\n            data ? data[name] : data, \n            (value) => {\n                setData((prev: any) => ({ ...prev, [name]: value }));\n                cache.current[name] = value;\n            }\n        ];\n    } else {\n        return [data, setData];\n    }\n};\n\n/**\n * Custom hook for querying data from the QueryContext and applying a callback selector.\n * @param {function} [callbackSelector] - The callback function to apply as a selector on the data.\n * @returns {*} The result of applying the callback selector on the data from the QueryContext.\n */\nexport const useQuerySelector = (callbackSelector: Function = (state: any) => {}): any => {\n    // @ts-ignore\n    const [data] = useContext(QueryContext);\n    \n    return callbackSelector(data);\n};\n\n/**\n * Use query hook that manage requests, cache and other features.\n * @param {string} url \n * @param {object} options\n * @param {string} [options.name] Name must be a string. It should contains data state name.\n * @param {string} [options.selector] Selector must be a string. It should contains key value to select from result object.\n * @param {string} [options.pick] Pick must be a function or an array of string. It rappresent the function or the array to pick just a portion of data.\n * @param {function} [options.transform] Transform must be a function. It rappresent the funcion to transform data before saving on state. If you need to mutate data, use `mutate` function instead\n * @param {string} [options.method] Method must be a string. It should be one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".\n * @param {object} [options.headers] Headers must be an object. It should contains request headers key value.\n * @param {*} [options.body]\n * @param {boolean} [options.isDebuggerActivated] isDebuggerActivated must be a boolean. It should be activated if you need to debug all process.\n * @param {number} [options.cacheTimeout] cacheTimeout must be a number. It rappresent the timeout to remove cached data from memory in milliseconds.\n * @returns {QueryResult}\n */\nexport const useQuery = (url: string, options: DefaultUseQueryOptions = { ...DEFAULT_OPTIONS }): QueryResult => {\n    const { name, selector, pick, transform, method, headers, body, isDebuggerActivated } = { ...DEFAULT_OPTIONS, ...options };\n\n    validateOptions({ ...DEFAULT_OPTIONS, ...options });\n    \n    // const cache = useRef({});\n\n    const [data, setData] = useQueryState(name);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = async () => {\n        logDebugger(\"Fetching data...\", isDebuggerActivated);\n\n        if (error) setError(null);\n        if (!loading) setLoading(true);\n\n        if (cache.current[url]) {\n            logDebugger(\"Get data from cache, no need a new request\", isDebuggerActivated);\n            if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n            if (typeof pick === \"function\" || Array.isArray(pick)) logDebugger(\"pick data before saving\", isDebuggerActivated);\n\n            setData(cache.current[url]);\n            timeoutCacheClear(options, cache);\n            setLoading(false);\n            return;\n        }\n\n        try {\n            logDebugger(\"No data found in cache, proceed to do a new request...\", isDebuggerActivated);\n\n            // @ts-ignore\n            const response = await fetch(url, { method, headers, body });\n            const result = await response.json();\n\n            if (response.ok) {\n                const _result = selector ? result[selector] : result;\n                if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n                let _transformedData = typeof transform === \"function\" ? transform(_result) : _result;\n                if (typeof pick === \"function\" || Array.isArray(pick)) {\n                    logDebugger(\"pick data before saving\", isDebuggerActivated);\n                    // @ts-ignore\n                    _transformedData = JSON.parse(JSON.stringify(_transformedData, pick));\n                }\n                setData(_transformedData);\n                logDebugger(\"Request done\", isDebuggerActivated);\n                cache.current[url] = _transformedData;\n                timeoutCacheClear(options, cache);\n                logDebugger(`New data saved on cache for: \"${url}\"`, isDebuggerActivated);\n            } else {\n                setError(result);\n                logDebugger(\"An error occurred\", isDebuggerActivated, true, result);\n            }\n        } catch (err) {\n            setError(err);\n            logDebugger(\"An error occurred\", isDebuggerActivated, true, err);\n        } finally {\n            setLoading(false);\n            logDebugger(\"Data seatled, process done\", isDebuggerActivated);\n        }\n    };\n\n    useEffect (() => {\n        fetchData();\n    }, [url]);\n\n    return {\n        data,\n        error,\n        loading,\n        mutate: setData,\n        refresh: fetchData,\n        cache: {\n            get: (url) => {\n                return url ? cache.current[url] : cache.current;\n            },\n            has: (url) => {\n                return cache.current[url];\n            },\n            clear: () => {\n                cache.current = {};\n                logDebugger(`Cache cleared`, isDebuggerActivated);\n            }\n        }\n    };\n};\n\n/**\n * Use query hook that manage requests, cache and other features with an event like \"click\"\n * @param {string} url \n * @param {object} options\n * @param {string} [options.name] Name must be a string. It should contains data state name.\n * @param {string} [options.selector] Selector must be a string. It should contains key value to select from result object.\n * @param {string} [options.pick] Pick must be a function or an array of string. It rappresent the function or the array to pick just a portion of data.\n * @param {function} [options.transform] Transform must be a function. It rappresent the funcion to transform data before saving on state. If you need to mutate data, use `mutate` function instead\n * @param {string} [options.method] Method must be a string. It should be one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".\n * @param {object} [options.headers] Headers must be an object. It should contains request headers key value.\n * @param {*} [options.body]\n * @param {boolean} [options.isDebuggerActivated] isDebuggerActivated must be a boolean. It should be activated if you need to debug all process.\n * @param {number} [options.cacheTimeout] cacheTimeout must be a number. It rappresent the timeout to remove cached data from memory in milliseconds.\n * @returns {QueryEventResult}\n */\nexport const useQueryEvent = (url: string, options: DefaultUseQueryOptions = { ...DEFAULT_OPTIONS }): QueryEventResult => {\n    const [isSending, setIsSending] = useState(false);\n\n    const { name, selector, pick, transform, method, headers, body, isDebuggerActivated } = { ...DEFAULT_OPTIONS, ...options };\n\n    validateOptions({ ...DEFAULT_OPTIONS, ...options });\n    \n    // const cache = useRef({});\n\n    const [data, setData] = useQueryState(name);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = async () => {\n        logDebugger(\"Fetching data...\", isDebuggerActivated);\n\n        if (error) setError(null);\n        if (!loading) setLoading(true);\n\n        if (cache.current[url]) {\n            logDebugger(\"Get data from cache, no need a new request\", isDebuggerActivated);\n            if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n            if (typeof pick === \"function\" || Array.isArray(pick)) logDebugger(\"pick data before saving\", isDebuggerActivated);\n\n            setData(cache.current[url]);\n            timeoutCacheClear(options, cache);\n            setLoading(false);\n            return;\n        }\n\n        try {\n            logDebugger(\"No data found in cache, proceed to do a new request...\", isDebuggerActivated);\n\n            // @ts-ignore\n            const response = await fetch(url, { method, headers, data: body });\n            const result = await response.json();\n\n            if (response.ok) {\n                const _result = selector ? result[selector] : result;\n                if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n                let _transformedData = typeof transform === \"function\" ? transform(_result) : _result;\n                if (typeof pick === \"function\" || Array.isArray(pick)) {\n                    logDebugger(\"pick data before saving\", isDebuggerActivated);\n                    // @ts-ignore\n                    _transformedData = JSON.parse(JSON.stringify(_transformedData, pick));\n                }\n                setData(_transformedData);\n                logDebugger(\"Request done\", isDebuggerActivated);\n                cache.current[url] = _transformedData;\n                timeoutCacheClear(options, cache);\n                logDebugger(`New data saved on cache for: \"${url}\"`, isDebuggerActivated);\n            } else {\n                setError(result);\n                logDebugger(\"An error occurred\", isDebuggerActivated, true, result);\n            }\n        } catch (err) {\n            setError(err);\n            logDebugger(\"An error occurred\", isDebuggerActivated, true, err);\n        } finally {\n            setLoading(false);\n            logDebugger(\"Data seatled, process done\", isDebuggerActivated);\n        }\n    };\n  \n    const sendRequest = useCallback(async () => {\n      // don't send again while we are sending\n      if (isSending) return\n      // update state\n      setIsSending(true);\n      // send the actual request\n      await fetchData();\n      // once the request is sent, update state again\n      setIsSending(false);\n    }, [isSending, url]) // update the callback if the state changes\n  \n    return {\n        sendRequest,\n        isSending,\n        data,\n        error,\n        loading,\n        mutate: setData,\n        refresh: fetchData,\n        cache: {\n            get: (url: string) => {\n                return url ? cache.current[url] : cache.current;\n            },\n            has: (url: string) => {\n                return cache.current[url];\n            },\n            clear: () => {\n                cache.current = {};\n                logDebugger(`Cache cleared`, isDebuggerActivated);\n            }\n        }\n    }\n}"],"names":["DEFAULT_OPTIONS","name","undefined","selector","transform","pick","method","headers","body","isDebuggerActivated","cacheTimeout","dispatchers","actions","cache","current","logDebugger","message","isError","error","console","Date","toLocaleTimeString","log","validateOptions","options","keys","Object","_keys","symDifference","filter","item","includes","Error","indexOf","toUpperCase","Array","isArray","length","join","timeoutCacheClear","window","clearTimeout","setTimeout","createQueryStore","initialState","entries","forEach","_ref","key","value","__value","QueryContext","createContext","QueryProvider","_ref2","children","store","_dispatchers","_ref3","_extends2","_extends","_useState","useState","state","setState","_jsx","Provider","createQueryDispatcher","dispatcherOptions","_ref4","actionName","actionFn","data","setData","payload","_data","useQueryDispatcher","_useContext","useContext","_ref5","useQueryState","_useContext2","prev","_extends3","useQuerySelector","callbackSelector","_useContext3","useQuery","url","_DEFAULT_OPTIONS$opti","_useQueryState","_useState2","setError","_useState3","loading","setLoading","fetchData","Promise","resolve","_temp","_finallyRethrows","_catch","fetch","then","response","json","result","ok","_result","_transformedData","JSON","parse","stringify","err","_wasThrown","_result2","e","reject","useEffect","mutate","refresh","get","has","clear","useQueryEvent","_useState4","isSending","setIsSending","_DEFAULT_OPTIONS$opti2","_useQueryState2","_useState5","_useState6","_temp2","_wasThrown2","_result3","sendRequest","useCallback"],"mappings":"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"}