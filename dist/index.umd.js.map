{"version":3,"file":"index.umd.js","sources":["../src/index.tsx"],"sourcesContent":["// @ts-ignore\nimport { useState, useEffect, useRef, createContext, useContext, useCallback, Dispatch, SetStateAction, MutableRefObject } from 'react';\n\ninterface QueryResultCacheFn {\n    get: Function,\n    has: Function,\n    clear: Function,\n}\n\ninterface QueryResult {\n    data: any;\n    error: Error | false | null;\n    loading: boolean;\n    mutate: Function;\n    refresh: Function;\n    cache: QueryResultCacheFn;\n}\n\ninterface QueryEventResult {\n    sendRequest: Function;\n    isSending: boolean;\n    data: any;\n    error: Error | false | null;\n    loading: boolean;\n    mutate: Function;\n    refresh: Function;\n    cache: QueryResultCacheFn;\n}\n\ninterface DefaultUseQueryOptions {\n    name?: string;\n    selector?: string;\n    pick?: Array<any> | Function;\n    transform?: Function;\n    method?: string;\n    headers?: object;\n    body?: any;\n    isDebuggerActivated?: boolean;\n    cacheTimeout?: number;\n}\n\ninterface CacheObject {\n    current: object\n}\n\ninterface CreateStoreReturn {\n    __value: object\n}\n\ntype DispatchersActions = {\n    actions: object\n}\n\ntype DispatcherOptions = {\n    name: string,\n    actions: object\n}\n\nconst DEFAULT_OPTIONS: DefaultUseQueryOptions = {\n    name: undefined,\n    selector: undefined,\n    transform: undefined,\n    pick: undefined,\n    method: \"GET\",\n    headers: undefined,\n    body: undefined,\n    isDebuggerActivated: false,\n    cacheTimeout: 0,\n};\n\nconst dispatchers: DispatchersActions = {\n    actions: {}\n};\n\nconst cache: CacheObject = {\n    current: {}\n}\n\nlet cacheTimeout: number | null = null;\n\n/**\n * @param {string} [message=\"\"] \n * @param {boolean} [isDebuggerActivated=false]\n * @param {boolean} [isError=false] \n * @param {null|string|Error} [error=null]\n */\nconst logDebugger = (message: string = \"\", isDebuggerActivated: boolean = false, isError: boolean = false, error: null | Error = null) => {\n    if (isError) {\n        if (isDebuggerActivated) console.error(`[USE_QUERY]: ${message} - ${new Date().toLocaleTimeString()}`, error);\n    } else {\n        if (isDebuggerActivated) console.log(`[USE_QUERY]: ${message} - ${new Date().toLocaleTimeString()}`);\n    }\n}\n\n/**\n * @param {DefaultUseQueryOptions} options \n * @returns {boolean}\n */\nconst validateOptions = (options: DefaultUseQueryOptions): boolean => {\n    const keys = Object.keys(DEFAULT_OPTIONS);\n    const _keys = Object.keys(options);\n    const symDifference = _keys.filter(item => !keys.includes(item));\n\n    if (options.selector !== undefined && typeof options.selector !== \"string\") {\n        logDebugger(\"Validation error for `options.selector`\", options.isDebuggerActivated, true, new Error(\"Selector must be a string. It should contains key value to select from result object.\"));\n        return false;\n    } else if (options.name !== undefined && typeof options.name !== \"string\") {\n        logDebugger(\"Validation error for `options.name`\", options.isDebuggerActivated, true, new Error(\"Name must be a string. It should contains data name to retrieve it from state.\"));\n        return false;\n    } else if (options.method !== undefined && (typeof options.method !== \"string\" || [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"].indexOf(options.method.toUpperCase()) === -1)) {\n        logDebugger(\"Validation error for `options.method`\", options.isDebuggerActivated, true, new Error('Method must be a string. It should be one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".'));\n        return false;\n    } else if (options.headers !== undefined && typeof options.headers !== \"object\" && Array.isArray(options.headers)) {\n        logDebugger(\"Validation error for `options.headers`\", options.isDebuggerActivated, true, new Error(\"Headers must be an object. It should contains request headers key value.\"));\n        return false;\n    } else if (options.isDebuggerActivated !== undefined && typeof options.isDebuggerActivated !== \"boolean\" && Array.isArray(options.headers)) {\n        logDebugger(\"Validation error for `options.isDebuggerActivated`\", true, true, new Error(\"isDebuggerActivated must be a boolean. It should be activated if you need to debug all process.\"));\n        return false;\n    } else if (options.transform !== undefined && typeof options.transform !== \"function\") {\n        logDebugger(\"Validation error for `options.transform`\", true, true, new Error(\"transform must be a function. It rappresent the function to transform data before saving on state.\"));\n        return false;\n    } else if (options.pick !== undefined && (typeof options.pick !== \"function\" && !Array.isArray(options.pick))) {\n        logDebugger(\"Validation error for `options.pick`\", true, true, new Error(\"pick must be a function or an array. It rappresent the function or the array to pick just a portion of data.\"));\n        return false;\n    } else if (options.cacheTimeout !== undefined && typeof options.cacheTimeout !== \"number\") {\n        logDebugger(\"Validation error for `options.cacheTimeout`\", true, true, new Error(\"cacheTimeout must be a number. It rappresent the timeout to remove cached data from memory in milliseconds.\"));\n        return false;\n    }\n    \n    if (symDifference.length > 0) {\n        logDebugger(\"Validation error\", true, true, new Error(`Found not valid option${symDifference.length > 1 ? \"s\" : \"\"}: \"${symDifference.join('\", \"')}\".`));\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * @param {DefaultUseQueryOptions} options \n * @param {MutableRefObject} cache \n */\nconst timeoutCacheClear = (options: DefaultUseQueryOptions, cache: MutableRefObject<any>) => {\n    if (options.cacheTimeout && options.cacheTimeout > 0) {\n        logDebugger(`Cache clear timeout start: ${options.cacheTimeout / 1000} seconds.`, options.isDebuggerActivated);\n        window.clearTimeout(cacheTimeout as number);\n        cacheTimeout = window.setTimeout(() => {\n            cache.current = {};\n            logDebugger(`Cache cleared`, options.isDebuggerActivated);\n        }, options.cacheTimeout);\n    }\n}\n\n/**\n * Creates a store with the provided initial state.\n * @param {object} initialState - The initial state object for the store.\n * @returns {CreateStoreReturn} An object representing the created store.\n */\nexport const createQueryStore = (initialState: object): CreateStoreReturn => {\n    Object.entries(initialState).forEach(([key, value]) => {\n        cache.current[key] = value;\n    });\n\n    return { __value: initialState };\n}\n\nconst QueryContext = createContext(null);\n\nexport const QueryProvider = ({ children, store, dispatchers: _dispatchers }) => {\n    if (store && !store.__value) throw new Error(\"`store` must be a valid QueryStore data, use `createQueryStore` function to create it\");\n\n    if (_dispatchers && !Array.isArray(_dispatchers)) {\n        throw new Error(\"`dispatchers` must be a valid array of dispatchers, use `createDispatcher` function to generate them\");\n    } else {\n        _dispatchers.forEach(({ name, actions }) => {\n            dispatchers.actions = {\n                ...dispatchers.actions,\n                [name]: {\n                    ...dispatchers.actions[name],\n                    ...actions,\n                },\n            }\n        });\n    }\n    \n    const [state, setState] = useState(store ? store.__value : null);\n\n    return (\n        // @ts-ignore\n        <QueryContext.Provider value={[state, setState]}>\n            {children}\n        </QueryContext.Provider>\n    )\n}\n\n/**\n * Creates a dispatcher object with specified actions for managing state updates.\n * @param {DispatcherOptions} dispatcherOptions - Options for configuring the dispatcher.\n * @returns {DispatcherObject} An object representing the created dispatcher.\n */\nexport const createQueryDispatcher = (dispatcherOptions: DispatcherOptions) => {\n    const actions = {};\n\n    Object.entries(dispatcherOptions.actions).forEach(([actionName, actionFn]) => {\n        actions[actionName] = (data: any, setData: Function) => (payload: any) => {\n            const _data = { ...data }[dispatcherOptions.name];\n            \n            actionFn(_data, payload);\n\n            setData({ ...data, ..._data });\n        };\n    });\n\n    return {\n        name: dispatcherOptions.name,\n        actions\n    }\n}\n\n/**\n * Custom hook for accessing dispatcher actions associated with a specific name.\n * @param {string} name - The name of the dispatcher to retrieve actions for.\n * @returns {Object} An object containing the actions associated with the specified dispatcher name.\n */\nexport const useQueryDispatcher = (name: string) => {\n    // @ts-ignore\n    const [data, setData] = useContext(QueryContext);\n\n    const actions = {};\n    \n    Object.entries(dispatchers.actions[name]).forEach(([actionName, actionFn]) => {\n        // @ts-ignore\n        actions[actionName] = (payload: any) => actionFn(data, setData)(payload);\n    });\n\n    return actions;\n}\n\n/**\n * Custom hook for accessing and updating query state from the QueryContext.\n * @param {string} [name=undefined] - The name of the specific state to access within the query data.\n * @returns {[S, Dispatch<SetStateAction<S>>]} An array containing the queried state and a function to update the state.\n *                 If `name` is provided, it returns the specified state and a function to update that state.\n *                 If `name` is not provided, it returns the entire query data and a function to update it.\n */\nexport const useQueryState = (name: string | undefined = undefined): [any, Dispatch<SetStateAction<any>>] => {\n    // @ts-ignore\n    const [data, setData] = useContext(QueryContext);\n    \n    if (name) { \n        return [\n            data ? data[name] : data, \n            (value) => {\n                setData((prev: any) => ({ ...prev, [name]: value }));\n                cache.current[name] = value;\n            }\n        ];\n    } else {\n        return [data, setData];\n    }\n};\n\n/**\n * Custom hook for querying data from the QueryContext and applying a callback selector.\n * @param {function} [callbackSelector] - The callback function to apply as a selector on the data.\n * @returns {*} The result of applying the callback selector on the data from the QueryContext.\n */\nexport const useQuerySelector = (callbackSelector: Function = (state: any) => {}): any => {\n    // @ts-ignore\n    const [data] = useContext(QueryContext);\n    \n    return callbackSelector(data);\n};\n\n/**\n * Use query hook that manage requests, cache and other features.\n * @param {string} url \n * @param {object} options\n * @param {string} [options.name] Name must be a string. It should contains data state name.\n * @param {string} [options.selector] Selector must be a string. It should contains key value to select from result object.\n * @param {string} [options.pick] Pick must be a function or an array of string. It rappresent the function or the array to pick just a portion of data.\n * @param {function} [options.transform] Transform must be a function. It rappresent the funcion to transform data before saving on state. If you need to mutate data, use `mutate` function instead\n * @param {string} [options.method] Method must be a string. It should be one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".\n * @param {object} [options.headers] Headers must be an object. It should contains request headers key value.\n * @param {*} [options.body]\n * @param {boolean} [options.isDebuggerActivated] isDebuggerActivated must be a boolean. It should be activated if you need to debug all process.\n * @param {number} [options.cacheTimeout] cacheTimeout must be a number. It rappresent the timeout to remove cached data from memory in milliseconds.\n * @returns {QueryResult}\n */\nexport const useQuery = (url: string, options: DefaultUseQueryOptions = { ...DEFAULT_OPTIONS }): QueryResult => {\n    const { name, selector, pick, transform, method, headers, body, isDebuggerActivated } = { ...DEFAULT_OPTIONS, ...options };\n\n    validateOptions({ ...DEFAULT_OPTIONS, ...options });\n    \n    // const cache = useRef({});\n\n    const [data, setData] = useQueryState(name);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = async () => {\n        logDebugger(\"Fetching data...\", isDebuggerActivated);\n\n        if (error) setError(null);\n        if (!loading) setLoading(true);\n\n        if (cache.current[url]) {\n            logDebugger(\"Get data from cache, no need a new request\", isDebuggerActivated);\n            if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n            if (typeof pick === \"function\" || Array.isArray(pick)) logDebugger(\"pick data before saving\", isDebuggerActivated);\n\n            setData(cache.current[url]);\n            timeoutCacheClear(options, cache);\n            setLoading(false);\n            return;\n        }\n\n        try {\n            logDebugger(\"No data found in cache, proceed to do a new request...\", isDebuggerActivated);\n\n            // @ts-ignore\n            const response = await fetch(url, { method, headers, body });\n            const result = await response.json();\n\n            if (response.ok) {\n                const _result = selector ? result[selector] : result;\n                if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n                let _transformedData = typeof transform === \"function\" ? transform(_result) : _result;\n                if (typeof pick === \"function\" || Array.isArray(pick)) {\n                    logDebugger(\"pick data before saving\", isDebuggerActivated);\n                    // @ts-ignore\n                    _transformedData = JSON.parse(JSON.stringify(_transformedData, pick));\n                }\n                setData(_transformedData);\n                logDebugger(\"Request done\", isDebuggerActivated);\n                cache.current[url] = _transformedData;\n                timeoutCacheClear(options, cache);\n                logDebugger(`New data saved on cache for: \"${url}\"`, isDebuggerActivated);\n            } else {\n                setError(result);\n                logDebugger(\"An error occurred\", isDebuggerActivated, true, result);\n            }\n        } catch (err) {\n            setError(err);\n            logDebugger(\"An error occurred\", isDebuggerActivated, true, err);\n        } finally {\n            setLoading(false);\n            logDebugger(\"Data seatled, process done\", isDebuggerActivated);\n        }\n    };\n\n    useEffect (() => {\n        fetchData();\n    }, [url]);\n\n    return {\n        data,\n        error,\n        loading,\n        mutate: setData,\n        refresh: fetchData,\n        cache: {\n            get: (url) => {\n                return url ? cache.current[url] : cache.current;\n            },\n            has: (url) => {\n                return cache.current[url];\n            },\n            clear: () => {\n                cache.current = {};\n                logDebugger(`Cache cleared`, isDebuggerActivated);\n            }\n        }\n    };\n};\n\n/**\n * Use query hook that manage requests, cache and other features with an event like \"click\"\n * @param {string} url \n * @param {object} options\n * @param {string} [options.name] Name must be a string. It should contains data state name.\n * @param {string} [options.selector] Selector must be a string. It should contains key value to select from result object.\n * @param {string} [options.pick] Pick must be a function or an array of string. It rappresent the function or the array to pick just a portion of data.\n * @param {function} [options.transform] Transform must be a function. It rappresent the funcion to transform data before saving on state. If you need to mutate data, use `mutate` function instead\n * @param {string} [options.method] Method must be a string. It should be one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".\n * @param {object} [options.headers] Headers must be an object. It should contains request headers key value.\n * @param {*} [options.body]\n * @param {boolean} [options.isDebuggerActivated] isDebuggerActivated must be a boolean. It should be activated if you need to debug all process.\n * @param {number} [options.cacheTimeout] cacheTimeout must be a number. It rappresent the timeout to remove cached data from memory in milliseconds.\n * @returns {QueryEventResult}\n */\nexport const useQueryEvent = (url: string, options: DefaultUseQueryOptions = { ...DEFAULT_OPTIONS }): QueryEventResult => {\n    const [isSending, setIsSending] = useState(false);\n\n    const { name, selector, pick, transform, method, headers, body, isDebuggerActivated } = { ...DEFAULT_OPTIONS, ...options };\n\n    validateOptions({ ...DEFAULT_OPTIONS, ...options });\n    \n    // const cache = useRef({});\n\n    const [data, setData] = useQueryState(name);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = async () => {\n        logDebugger(\"Fetching data...\", isDebuggerActivated);\n\n        if (error) setError(null);\n        if (!loading) setLoading(true);\n\n        if (cache.current[url]) {\n            logDebugger(\"Get data from cache, no need a new request\", isDebuggerActivated);\n            if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n            if (typeof pick === \"function\" || Array.isArray(pick)) logDebugger(\"pick data before saving\", isDebuggerActivated);\n\n            setData(cache.current[url]);\n            timeoutCacheClear(options, cache);\n            setLoading(false);\n            return;\n        }\n\n        try {\n            logDebugger(\"No data found in cache, proceed to do a new request...\", isDebuggerActivated);\n\n            // @ts-ignore\n            const response = await fetch(url, { method, headers, data: body });\n            const result = await response.json();\n\n            if (response.ok) {\n                const _result = selector ? result[selector] : result;\n                if (typeof transform === \"function\") logDebugger(\"transform data before saving\", isDebuggerActivated);\n                let _transformedData = typeof transform === \"function\" ? transform(_result) : _result;\n                if (typeof pick === \"function\" || Array.isArray(pick)) {\n                    logDebugger(\"pick data before saving\", isDebuggerActivated);\n                    // @ts-ignore\n                    _transformedData = JSON.parse(JSON.stringify(_transformedData, pick));\n                }\n                setData(_transformedData);\n                logDebugger(\"Request done\", isDebuggerActivated);\n                cache.current[url] = _transformedData;\n                timeoutCacheClear(options, cache);\n                logDebugger(`New data saved on cache for: \"${url}\"`, isDebuggerActivated);\n            } else {\n                setError(result);\n                logDebugger(\"An error occurred\", isDebuggerActivated, true, result);\n            }\n        } catch (err) {\n            setError(err);\n            logDebugger(\"An error occurred\", isDebuggerActivated, true, err);\n        } finally {\n            setLoading(false);\n            logDebugger(\"Data seatled, process done\", isDebuggerActivated);\n        }\n    };\n  \n    const sendRequest = useCallback(async () => {\n      // don't send again while we are sending\n      if (isSending) return\n      // update state\n      setIsSending(true);\n      // send the actual request\n      await fetchData();\n      // once the request is sent, update state again\n      setIsSending(false);\n    }, [isSending, url]) // update the callback if the state changes\n  \n    return {\n        sendRequest,\n        isSending,\n        data,\n        error,\n        loading,\n        mutate: setData,\n        refresh: fetchData,\n        cache: {\n            get: (url: string) => {\n                return url ? cache.current[url] : cache.current;\n            },\n            has: (url: string) => {\n                return cache.current[url];\n            },\n            clear: () => {\n                cache.current = {};\n                logDebugger(`Cache cleared`, isDebuggerActivated);\n            }\n        }\n    }\n}"],"names":["DEFAULT_OPTIONS","name","undefined","selector","transform","pick","method","headers","body","isDebuggerActivated","cacheTimeout","dispatchers","actions","cache","current","logDebugger","message","isError","error","console","Date","toLocaleTimeString","log","validateOptions","options","keys","Object","_keys","symDifference","filter","item","includes","Error","indexOf","toUpperCase","Array","isArray","length","join","timeoutCacheClear","window","clearTimeout","setTimeout","createQueryStore","initialState","entries","forEach","_ref","key","value","__value","QueryContext","createContext","QueryProvider","_ref2","children","store","_dispatchers","_ref3","_extends2","_extends","_useState","useState","state","setState","_jsx","Provider","createQueryDispatcher","dispatcherOptions","_ref4","actionName","actionFn","data","setData","payload","_data","useQueryDispatcher","_useContext","useContext","_ref5","useQueryState","_useContext2","prev","_extends3","useQuerySelector","callbackSelector","_useContext3","useQuery","url","_DEFAULT_OPTIONS$opti","_useQueryState","_useState2","setError","_useState3","loading","setLoading","fetchData","Promise","resolve","_temp","_finallyRethrows","_catch","fetch","then","response","json","result","ok","_result","_transformedData","JSON","parse","stringify","err","_wasThrown","_result2","e","reject","useEffect","mutate","refresh","get","has","clear","useQueryEvent","_useState4","isSending","setIsSending","_DEFAULT_OPTIONS$opti2","_useQueryState2","_useState5","_useState6","_temp2","_wasThrown2","_result3","sendRequest","useCallback"],"mappings":"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"}